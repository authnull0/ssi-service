pipeline {
    agent any
    triggers {
        githubPush()
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '10', daysToKeepStr: '', numToKeepStr: '10')
    }
    environment { 
        GITHUB_CREDENTIALS = credentials('ghcr-creds')
    }
    stages {
        stage('Checkout') {
            steps {
            git credentialsId: 'amanpd-github-credentials', url: 'https://github.com/authnull0/ssi-service.git', branch: 'build'
            }
        }
        stage('Sonarqube Scanning') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
                scannerCmd = "${scannerHome}/bin/sonar-scanner"
                scannerCmdOptions = "-Dsonar.projectKey=ssi-service -Dsonar.sources=build,cmd,config,doc,gui,integration,internal,pkg,sip -Dsonar.host.url=http://195.201.165.12:9000"
                }
            steps {
                withSonarQubeEnv(installationName: 'sonarqube-server') {
                sh "${scannerCmd} ${scannerCmdOptions}"
                }
                timeout(time: 10, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    def dockerImage = "ssi-service:0.0.${env.BUILD_ID}"
                    env.dockerImage = dockerImage
                    sh "docker build . --tag ${dockerImage}"
                }
            }
        }
        stage('Push Docker Image to GitHub Container Registry') {
            steps {
                script {
                    def dockerImage = "ghcr.io/authnull0/ssi-service:0.0.${env.BUILD_ID}"
                    sh 'echo $GITHUB_CREDENTIALS_PSW | docker login ghcr.io -u $GITHUB_CREDENTIALS_USR --password-stdin'
                    sh "docker tag ${env.dockerImage} ${dockerImage}"
                    sh "docker push ${dockerImage}"
                    sh "docker logout" 
                }
            }
        }
    }
}
